import { Tapper } from './components/Tapper.jsx';
import { Shop } from './components/Shop.jsx';
import { Wallet } from './components/Wallet.jsx';
import { Referral } from './components/Referral.jsx';
import { Achievements } from './components/Achievements.jsx';
import { CryptoMiner } from './components/CryptoMiner.jsx';
import { CryptoService } from './services/CryptoService.js';
import UserService from './services/UserService.js';
import AchievementService from './services/AchievementService.js';

export class App {
  constructor() {
    this.initServices();
    this.initComponents();
    this.setupTelegramWebApp();
    this.setupEventListeners();
    this.renderApp();
    this.checkDailyBonus();
  }

  initServices() {
    this.cryptoService = new CryptoService();
    this.userService = UserService;
    this.achievementService = new AchievementService(this.userService);
  }

  initComponents() {
    this.tapper = new Tapper(this.userService, this.cryptoService);
    this.shop = new Shop(this.userService);
    this.wallet = new Wallet(this.userService, this.cryptoService);
    this.referral = new Referral(this.userService);
    this.achievements = new Achievements(this.achievementService);
    this.cryptoMiner = new CryptoMiner(this.userService, this.cryptoService);
    
    this.components = {
      tapper: this.tapper,
      shop: this.shop,
      wallet: this.wallet,
      referral: this.referral,
      achievements: this.achievements,
      miner: this.cryptoMiner
    };
    
    this.activeComponent = 'tapper';
  }

  setupTelegramWebApp() {
    if (window.Telegram && window.Telegram.WebApp) {
      window.Telegram.WebApp.expand();
      window.Telegram.WebApp.ready();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
      const initData = window.Telegram.WebApp.initData;
      if (initData) {
        const refMatch = initData.match(/start=ref_(\w+)/);
        if (refMatch) {
          const refCode = refMatch[1];
          this.userService.handleReferral(refCode);
        }
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
      const colorScheme = window.Telegram.WebApp.colorScheme;
      document.body.classList.add(colorScheme);
    }
  }

  setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
    document.addEventListener('click', (e) => {
      if (e.target.closest('.nav-tab')) {
        const tab = e.target.closest('.nav-tab').dataset.tab;
        this.switchTab(tab);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ç–∞–ø–µ
    document.addEventListener('tap', () => {
      this.achievementService.checkAchievements();
    });
  }

  renderApp() {
    const app = document.getElementById('app');
    app.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const navigation = document.createElement('div');
    navigation.className = 'navigation';
    navigation.innerHTML = `
      <div class="nav-tab ${this.activeComponent === 'tapper' ? 'active' : ''}" data-tab="tapper">
        <span class="nav-icon">üéÆ</span>
        <span class="nav-text">–¢–∞–ø–µ—Ä</span>
      </div>
      <div class="nav-tab ${this.activeComponent === 'miner' ? 'active' : ''}" data-tab="miner">
        <span class="nav-icon">‚õèÔ∏è</span>
        <span class="nav-text">–ú–∞–π–Ω–µ—Ä</span>
      </div>
      <div class="nav-tab ${this.activeComponent === 'shop' ? 'active' : ''}" data-tab="shop">
        <span class="nav-icon">üõí</span>
        <span class="nav-text">–ú–∞–≥–∞–∑–∏–Ω</span>
      </div>
      <div class="nav-tab ${this.activeComponent === 'wallet' ? 'active' : ''}" data-tab="wallet">
        <span class="nav-icon">üí∞</span>
        <span class="nav-text">–ö–æ—à–µ–ª–µ–∫</span>
      </div>
      <div class="nav-tab ${this.activeComponent === 'achievements' ? 'active' : ''}" data-tab="achievements">
        <span class="nav-icon">üèÜ</span>
        <span class="nav-text">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
      </div>
      <div class="nav-tab ${this.activeComponent === 'referral' ? 'active' : ''}" data-tab="referral">
        <span class="nav-icon">üë•</span>
        <span class="nav-text">–†–µ—Ñ–µ—Ä–∞–ª—ã</span>
      </div>
    `;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const content = document.createElement('div');
    content.className = 'content';
    content.appendChild(this.components[this.activeComponent].getElement());
    
    app.appendChild(content);
    app.appendChild(navigation);
  }

  switchTab(tab) {
    if (this.activeComponent === tab) return;
    
    this.activeComponent = tab;
    this.renderApp();
    
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞ –≤ Telegram
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }
  }

  checkDailyBonus() {
    const lastLogin = this.userService.getLastLogin();
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
    const lastLoginDate = new Date(lastLogin).getTime();
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥ –±—ã–ª –Ω–µ —Å–µ–≥–æ–¥–Ω—è
    if (lastLoginDate < today) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—Ö–æ–¥ –≤—á–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–µ—Ä–∏–∏
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      const yesterdayTime = yesterday.getTime();
      
      if (lastLoginDate >= yesterdayTime) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –¥–Ω–µ–π
        this.userService.incrementDailyStreak();
      } else {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é –¥–Ω–µ–π
        this.userService.resetDailyStreak();
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
      this.showDailyBonus();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      this.userService.updateLastLogin();
    }
  }

  showDailyBonus() {
    const streak = this.userService.getDailyStreak();
    let bonus = 0.0001; // –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
    if (streak >= 7) {
      bonus = 0.001; // –ë–æ–Ω—É—Å –∑–∞ –Ω–µ–¥–µ–ª—é
    } else if (streak >= 3) {
      bonus = 0.0005; // –ë–æ–Ω—É—Å –∑–∞ 3 –¥–Ω—è
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
    this.userService.addCrypto('BTC', bonus);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –±–æ–Ω—É—Å–æ–º
    const modal = document.createElement('div');
    modal.className = 'modal daily-bonus-modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h3>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!</h3>
          <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
          <div class="bonus-icon">üéÅ</div>
          <h4>–î–µ–Ω—å ${streak}</h4>
          <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ <strong>${bonus} BTC</strong> –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!</p>
          <div class="streak-info">
            <p>–°–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤: ${streak} ${streak === 1 ? '–¥–µ–Ω—å' : streak < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}</p>
            <div class="streak-progress">
              ${Array(7).fill(0).map((_, i) => `
                <div class="streak-day ${i < streak ? 'active' : ''}"></div>
              `).join('')}
            </div>
            <p class="streak-hint">–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!</p>
          </div>
          <button class="claim-bonus-btn">–ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.querySelector('.close-modal').addEventListener('click', () => {
      modal.remove();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
    modal.querySelector('.claim-bonus-btn').addEventListener('click', () => {
      modal.remove();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
      const bonusEffect = document.createElement('div');
      bonusEffect.className = 'bonus-effect';
      bonusEffect.innerHTML = `+${bonus} BTC`;
      document.body.appendChild(bonusEffect);
      
      setTimeout(() => {
        bonusEffect.classList.add('fade-out');
        setTimeout(() => bonusEffect.remove(), 1000);
      }, 2000);
    });
  }
}

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ main.js
