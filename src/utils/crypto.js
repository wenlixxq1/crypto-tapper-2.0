javascript
/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
 * - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏
 * - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤
 */

// –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API)
const DEFAULT_RATES = {
  btc: 50000, // 1 BTC = 50000 USDT
  eth: 3000,  // 1 ETH = 3000 USDT
  ton: 5,     // 1 TON = 5 USDT
  usdt: 1     // 1 USDT = 1 USDT
};

// –ò–∫–æ–Ω–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å emoji –∏–ª–∏ SVG)
const CRYPTO_ICONS = {
  btc: 'üí∞',
  eth: '‚ö°',
  ton: 'üü°',
  usdt: 'üíµ'
};

// –ö–æ–ª-–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const DECIMALS = {
  btc: 8,
  eth: 6,
  ton: 2,
  usdt: 2
};

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
 * @param {number} amount - –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞
 * @param {string} from - –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ (btc, eth, ton, usdt)
 * @param {string} to - –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
 * @param {object} rates - –û–±—ä–µ–∫—Ç —Å –∫—É—Ä—Å–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {number} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
export function convertCrypto(amount, from, to, rates = DEFAULT_RATES) {
  if (!rates[from] || !rates[to]) {
    console.error(`Unknown currency: ${from} or ${to}`);
    return 0;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ USDT (1 BTC ‚Üí USDT ‚Üí 1 ETH)
  const usdtValue = amount * rates[from];
  return usdtValue / rates[to];
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} amount - –°—É–º–º–∞
 * @param {string} currency - –í–∞–ª—é—Ç–∞ (btc, eth, ton, usdt)
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (0.001234 BTC)
 */
export function formatCrypto(amount, currency) {
  const decimals = DECIMALS[currency] || 4;
  const fixed = amount.toFixed(decimals).replace(/\.?0+$/, '');
  return `${fixed} ${currency.toUpperCase()}`;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –≤–∞–ª—é—Ç—ã
 * @param {string} currency - –ö–æ–¥ –≤–∞–ª—é—Ç—ã
 * @returns {string} - Emoji –∏–ª–∏ —Å–∏–º–≤–æ–ª
 */
export function getCryptoIcon(currency) {
  return CRYPTO_ICONS[currency.toLowerCase()] || '‚ùì';
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å (–¥–ª—è –¥–µ–º–æ)
 * @param {string} currency - –í–∞–ª—é—Ç–∞
 * @returns {string} - –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 */
export function generateCryptoAddress(currency) {
  const prefixes = {
    btc: '1',
    eth: '0x',
    ton: 'EQ',
    usdt: '0x' // USDT-ERC20
  };

  const chars = '0123456789ABCDEF';
  const prefix = prefixes[currency] || '';
  let address = prefix;

  for (let i = 0; i < 10; i++) {
    address += chars.charAt(Math.floor(Math.random() * chars.length));
  }

  return address;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
 * @param {string} address - –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 * @param {string} currency - –í–∞–ª—é—Ç–∞
 * @returns {boolean} - true –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–µ–Ω
 */
export function validateAddress(address, currency) {
  if (!address) return false;

  const patterns = {
    btc: /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/,
    eth: /^0x[a-fA-F0-9]{40}$/,
    ton: /^EQ[a-zA-Z0-9]{48}$/,
    usdt: /^0x[a-fA-F0-9]{40}$/ // USDT-ERC20
  };

  const regex = patterns[currency];
  return regex ? regex.test(address) : false;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
 * @param {string} currency - –í–∞–ª—é—Ç–∞
 * @param {number} amount - –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
 * @returns {number} - –†–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–∏
 */
export function calculateFee(currency, amount = 0) {
  const fees = {
    btc: 0.0005,
    eth: 0.001,
    ton: 0.05,
    usdt: 0.001
  };

  return fees[currency] || 0;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
/*
console.log(convertCrypto(1, 'btc', 'eth')); // ‚Üí 16.666...
console.log(formatCrypto(0.00012345, 'btc')); // ‚Üí "0.000123 BTC"
console.log(generateCryptoAddress('eth')); // ‚Üí "0x7F1b2..."
console.log(validateAddress('0x5AEDA...', 'eth')); // ‚Üí true
*/