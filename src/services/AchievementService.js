export class AchievementService {
  constructor(userService) {
    this.userService = userService;
    this.achievements = this.defineAchievements();
    this.listeners = [];
  }

  defineAchievements() {
    return [
      {
        id: 'first_tap',
        name: '–ü–µ—Ä–≤—ã–π —Ç–∞–ø',
        description: '–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–∞–ø',
        icon: 'üéØ',
        condition: (stats) => stats.totalTaps >= 1,
        reward: { type: 'tapPower', value: 1 }
      },
      {
        id: 'tap_10',
        name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π —Ç–∞–ø–ø–µ—Ä',
        description: '–°–¥–µ–ª–∞–π—Ç–µ 10 —Ç–∞–ø–æ–≤',
        icon: 'üëÜ',
        condition: (stats) => stats.totalTaps >= 10,
        reward: { type: 'crypto', currency: 'BTC', value: 0.0001 }
      },
      {
        id: 'tap_100',
        name: '–û–ø—ã—Ç–Ω—ã–π —Ç–∞–ø–ø–µ—Ä',
        description: '–°–¥–µ–ª–∞–π—Ç–µ 100 —Ç–∞–ø–æ–≤',
        icon: 'üëä',
        condition: (stats) => stats.totalTaps >= 100,
        reward: { type: 'crypto', currency: 'ETH', value: 0.001 }
      },
      {
        id: 'tap_1000',
        name: '–¢–∞–ø-–º–∞—Å—Ç–µ—Ä',
        description: '–°–¥–µ–ª–∞–π—Ç–µ 1000 —Ç–∞–ø–æ–≤',
        icon: 'üí™',
        condition: (stats) => stats.totalTaps >= 1000,
        reward: { type: 'crypto', currency: 'BTC', value: 0.001 }
      },
      {
        id: 'earn_btc',
        name: '–ë–∏—Ç–∫–æ–∏–Ω-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç',
        description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 0.01 BTC',
        icon: '‚Çø',
        condition: (stats) => stats.earned.BTC >= 0.01,
        reward: { type: 'tapPower', value: 2 }
      },
      {
        id: 'earn_eth',
        name: '–≠—Ñ–∏—Ä–∏—É–º-—Ñ–∞–Ω–∞—Ç',
        description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 0.1 ETH',
        icon: 'Œû',
        condition: (stats) => stats.earned.ETH >= 0.1,
        reward: { type: 'tapPower', value: 2 }
      },
      {
        id: 'earn_all',
        name: '–ö—Ä–∏–ø—Ç–æ-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
        description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤—Å–µ –≤–∏–¥—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç',
        icon: 'üèÜ',
        condition: (stats) => {
          const cryptos = ['BTC', 'ETH', 'SOL', 'BNB', 'XRP', 'ADA', 'DOGE', 'USDT'];
          return cryptos.every(crypto => stats.earned[crypto] > 0);
        },
        reward: { type: 'bonus', name: 'multiTap', value: true }
      },
      {
        id: 'daily_streak_3',
        name: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏–≥—Ä–æ–∫',
        description: '–ò–≥—Ä–∞–π—Ç–µ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
        icon: 'üìÖ',
        condition: (stats) => stats.dailyStreak >= 3,
        reward: { type: 'crypto', currency: 'DOGE', value: 10 }
      },
      {
        id: 'daily_streak_7',
        name: '–ù–µ–¥–µ–ª—å–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω',
        description: '–ò–≥—Ä–∞–π—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        icon: 'üóìÔ∏è',
        condition: (stats) => stats.dailyStreak >= 7,
        reward: { type: 'passiveIncome', value: 1 }
      },
      {
        id: 'referral_1',
        name: '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞',
        description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 1 –¥—Ä—É–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ',
        icon: 'üë•',
        condition: (stats) => stats.referrals >= 1,
        reward: { type: 'crypto', currency: 'BTC', value: 0.0005 }
      }
    ];
  }

  checkAchievements() {
    const stats = this.userService.getStats();
    const unlockedAchievements = this.userService.getUnlockedAchievements();
    const newAchievements = [];

    this.achievements.forEach(achievement => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      if (!unlockedAchievements.includes(achievement.id)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (achievement.condition(stats)) {
          // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
          this.userService.unlockAchievement(achievement.id);
          
          // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
          this.giveReward(achievement.reward);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
          newAchievements.push(achievement);
        }
      }
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    if (newAchievements.length > 0) {
      this.notifyListeners(newAchievements);
    }

    return newAchievements;
  }

  giveReward(reward) {
    switch (reward.type) {
      case 'crypto':
        this.userService.addCrypto(reward.currency, reward.value);
        break;
      case 'tapPower':
        this.userService.increaseTapPower(reward.value);
        break;
      case 'passiveIncome':
        this.userService.increasePassiveIncome(reward.value);
        break;
      case 'bonus':
        this.userService.activateBonus(reward.name, reward.value);
        break;
    }
  }

  getAchievement(id) {
    return this.achievements.find(a => a.id === id);
  }

  getAllAchievements() {
    const unlockedAchievements = this.userService.getUnlockedAchievements();
    
    return this.achievements.map(achievement => ({
      ...achievement,
      unlocked: unlockedAchievements.includes(achievement.id)
    }));
  }

  addListener(callback) {
    this.listeners.push(callback);
  }

  removeListener(callback) {
    this.listeners = this.listeners.filter(listener => listener !== callback);
  }

  notifyListeners(achievements) {
    this.listeners.forEach(listener => listener(achievements));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
export default AchievementService;