javascript
export class Wallet {
  constructor(userService, cryptoService) {
    this.userService = userService;
    this.cryptoService = cryptoService;
    this.element = this.createWalletElement();
    this.setupEventListeners();
    this.updateInterval = this.setupAutoUpdate();
  }

  createWalletElement() {
    const element = document.createElement('div');
    element.className = 'wallet-component';
    
    const cryptoBalances = this.userService.getCryptoBalances();
    const totalValue = this.calculateTotalValue(cryptoBalances);
    
    element.innerHTML = `
      <div class="wallet-header">
        <h2 class="wallet-title">–ú–æ–π –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫</h2>
        <div class="total-value">
          <span class="total-label">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
          <span class="total-amount">${totalValue.toFixed(2)} USD</span>
        </div>
      </div>
      
      <div class="wallet-controls">
        <div class="search-box">
          <input type="text" class="search-input" placeholder="–ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã...">
          <button class="search-button">üîç</button>
        </div>
        <div class="sort-options">
          <select class="sort-select">
            <option value="value">–ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏</option>
            <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
            <option value="amount">–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É</option>
          </select>
        </div>
      </div>
      
      <div class="crypto-list">
        ${this.renderCryptoList(cryptoBalances)}
      </div>
      
      <div class="wallet-actions">
        <button class="action-button convert-button">–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        <button class="action-button withdraw-button">–í—ã–≤–µ—Å—Ç–∏</button>
      </div>
    `;
    
    return element;
  }

  renderCryptoList(balances) {
    const cryptos = Object.entries(balances)
      .filter(([_, amount]) => amount > 0)
      .map(([crypto, amount]) => ({
        symbol: crypto,
        name: this.cryptoService.getCryptoName(crypto),
        amount,
        value: this.cryptoService.getCryptoValue(crypto, amount),
        change: this.cryptoService.getCryptoChange(crypto),
        icon: this.cryptoService.getCryptoIcon(crypto)
      }));
    
    if (cryptos.length === 0) {
      return `
        <div class="empty-wallet">
          <div class="empty-icon">üí∏</div>
          <h3>–ö–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç</h3>
          <p>–ù–∞—á–Ω–∏—Ç–µ —Ç–∞–ø–∞—Ç—å, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É!</p>
        </div>
      `;
    }
    
    return cryptos.map(crypto => `
      <div class="crypto-item" data-symbol="${crypto.symbol}">
        <div class="crypto-icon">${crypto.icon}</div>
        <div class="crypto-info">
          <div class="crypto-name">${crypto.name}</div>
          <div class="crypto-symbol">${crypto.symbol}</div>
        </div>
        <div class="crypto-amount">
          <div class="amount">${crypto.amount.toFixed(6)}</div>
          <div class="value">${crypto.value.toFixed(2)} USD</div>
        </div>
        <div class="crypto-change ${crypto.change >= 0 ? 'positive' : 'negative'}">
          ${crypto.change >= 0 ? '‚Üë' : '‚Üì'} ${Math.abs(crypto.change)}%
        </div>
      </div>
    `).join('');
  }

  calculateTotalValue(balances) {
    return Object.entries(balances).reduce((total, [crypto, amount]) => {
      return total + this.cryptoService.getCryptoValue(crypto, amount);
    }, 0);
  }

  setupEventListeners() {
    // –ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    this.element.querySelector('.search-input').addEventListener('input', (e) => {
      this.filterCryptoList(e.target.value);
    });
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    this.element.querySelector('.sort-select').addEventListener('change', (e) => {
      this.sortCryptoList(e.target.value);
    });
    
    // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—à–µ–ª—å–∫–æ–º
    this.element.querySelector('.convert-button').addEventListener('click', () => {
      this.showConvertModal();
    });
    
    this.element.querySelector('.withdraw-button').addEventListener('click', () => {
      this.showWithdrawModal();
    });
    
    // –ö–ª–∏–∫ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    this.element.querySelectorAll('.crypto-item').forEach(item => {
      item.addEventListener('click', () => {
        const symbol = item.dataset.symbol;
        this.showCryptoDetails(symbol);
      });
    });
  }

  filterCryptoList(searchTerm) {
    const items = this.element.querySelectorAll('.crypto-item');
    const term = searchTerm.toLowerCase();
    
    items.forEach(item => {
      const name = item.querySelector('.crypto-name').textContent.toLowerCase();
      const symbol = item.querySelector('.crypto-symbol').textContent.toLowerCase();
      const matches = name.includes(term) || symbol.includes(term);
      item.style.display = matches ? 'flex' : 'none';
    });
  }

  sortCryptoList(sortBy) {
    const cryptoList = this.element.querySelector('.crypto-list');
    const items = Array.from(this.element.querySelectorAll('.crypto-item'));
    
    items.sort((a, b) => {
      const aSymbol = a.dataset.symbol;
      const bSymbol = b.dataset.symbol;
      
      switch (sortBy) {
        case 'name':
          return a.querySelector('.crypto-name').textContent.localeCompare(
            b.querySelector('.crypto-name').textContent
          );
        
        case 'amount':
          const aAmount = parseFloat(a.querySelector('.amount').textContent);
          const bAmount = parseFloat(b.querySelector('.amount').textContent);
          return bAmount - aAmount;
        
        case 'value':
        default:
          const aValue = parseFloat(a.querySelector('.value').textContent);
          const bValue = parseFloat(b.querySelector('.value').textContent);
          return bValue - aValue;
      }
    });
    
    // –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫
    cryptoList.innerHTML = '';
    items.forEach(item => cryptoList.appendChild(item));
  }

  showCryptoDetails(symbol) {
    const crypto = {
      symbol,
      name: this.cryptoService.getCryptoName(symbol),
      amount: this.userService.getCryptoBalance(symbol),
      value: this.cryptoService.getCryptoValue(symbol, this.userService.getCryptoBalance(symbol)),
      change: this.cryptoService.getCryptoChange(symbol),
      icon: this.cryptoService.getCryptoIcon(symbol)
    };
    
    const modal = document.createElement('div');
    modal.className = 'modal crypto-details-modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h3>${crypto.icon} ${crypto.name} (${crypto.symbol})</h3>
          <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
          <div class="crypto-stats">
            <div class="stat">
              <span class="stat-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
              <span class="stat-value">${crypto.amount.toFixed(6)}</span>
            </div>
            <div class="stat">
              <span class="stat-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
              <span class="stat-value">${crypto.value.toFixed(2)} USD</span>
            </div>
            <div class="stat">
              <span class="stat-label">–ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á):</span>
              <span class="stat-value ${crypto.change >= 0 ? 'positive' : 'negative'}">
                ${crypto.change >= 0 ? '‚Üë' : '‚Üì'} ${Math.abs(crypto.change)}%
              </span>
            </div>
          </div>
          
          <div class="crypto-chart">
            <canvas id="crypto-chart"></canvas>
          </div>
          
          <div class="crypto-actions">
            <button class="action-button convert-single-button" data-symbol="${crypto.symbol}">
              –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button class="action-button withdraw-single-button" data-symbol="${crypto.symbol}">
              –í—ã–≤–µ—Å—Ç–∏
            </button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    this.initChart(symbol, modal.querySelector('#crypto-chart'));
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.querySelector('.close-modal').addEventListener('click', () => {
      modal.remove();
    });
    
    // –î–µ–π—Å—Ç–≤–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    modal.querySelector('.convert-single-button').addEventListener('click', () => {
      modal.remove();
      this.showConvertModal(symbol);
    });
    
    modal.querySelector('.withdraw-single-button').addEventListener('click', () => {
      modal.remove();
      this.showWithdrawModal(symbol);
    });
  }

  initChart(symbol, canvas) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–º–∏—Ç–∞—Ü–∏—é
    const ctx = canvas.getContext('2d');
    const data = {
      labels: Array(24).fill(0).map((_, i) => `${i}:00`),
      datasets: [{
        label: `${symbol} Price`,
        data: Array(24).fill(0).map((_, i) => {
          const baseValue = this.cryptoService.getCryptoValue(symbol, 1);
          return baseValue * (0.95 + Math.random() * 0.1);
        }),
        borderColor: '#6c5ce7',
        tension: 0.1,
        fill: true,
        backgroundColor: 'rgba(108, 92, 231, 0.1)'
      }]
    };
    
    new Chart(ctx, {
      type: 'line',
      data: data,
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: false
          }
        }
      }
    });
  }

  showConvertModal(fromSymbol = null) {
    const modal = document.createElement('div');
    modal.className = 'modal convert-modal';
    
    const cryptos = Object.keys(this.userService.getCryptoBalances())
      .filter(symbol => this.userService.getCryptoBalance(symbol) > 0);
    
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h3>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</h3>
          <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
          <div class="convert-form">
            <div class="convert-from">
              <label>–û—Ç–¥–∞–µ—Ç–µ:</label>
              <div class="input-group">
                <select class="crypto-select" ${fromSymbol ? 'disabled' : ''}>
                  ${fromSymbol 
                    ? `<option value="${fromSymbol}">${fromSymbol}</option>`
                    : cryptos.map(symbol => `
                      <option value="${symbol}">${symbol} - ${this.cryptoService.getCryptoName(symbol)}</option>
                    `).join('')}
                </select>
                <input type="number" class="amount-input" placeholder="0.00" step="0.000001">
              </div>
            </div>
            
            <div class="convert-arrow">‚áÖ</div>
            
            <div class="convert-to">
              <label>–ü–æ–ª—É—á–∞–µ—Ç–µ:</label>
              <div class="input-group">
                <select class="crypto-select">
                  ${cryptos.map(symbol => `
                    <option value="${symbol}">${symbol} - ${this.cryptoService.getCryptoName(symbol)}</option>
                  `).join('')}
                </select>
                <input type="number" class="amount-input" placeholder="0.00" readonly>
              </div>
            </div>
          </div>
          
          <div class="convert-rate">
            <span class="rate-label">–ö—É—Ä—Å:</span>
            <span class="rate-value">1 BTC = 15.5 ETH</span>
          </div>
          
          <div class="convert-fee">
            –ö–æ–º–∏—Å—Å–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: 1%
          </div>
          
          <button class="action-button confirm-convert-button">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
    const updateRate = () => {
      const fromCrypto = modal.querySelector('.convert-from .crypto-select').value;
      const toCrypto = modal.querySelector('.convert-to .crypto-select').value;
      const fromValue = this.cryptoService.getCryptoValue(fromCrypto, 1);
      const toValue = this.cryptoService.getCryptoValue(toCrypto, 1);
      const rate = fromValue / toValue;
      
      modal.querySelector('.rate-value').textContent = 
        `1 ${fromCrypto} = ${rate.toFixed(6)} ${toCrypto}`;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –ø–æ–ª—É—á–µ–Ω–∏—è
      const amount = parseFloat(modal.querySelector('.convert-from .amount-input').value) || 0;
      const received = (amount * rate) * 0.99; // –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é 1%
      modal.querySelector('.convert-to .amount-input').value = received.toFixed(6);
    };
    
    modal.querySelectorAll('.crypto-select').forEach(select => {
      select.addEventListener('change', updateRate);
    });
    
    modal.querySelector('.convert-from .amount-input').addEventListener('input', updateRate);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.querySelector('.close-modal').addEventListener('click', () => {
      modal.remove();
    });
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    modal.querySelector('.confirm-convert-button').addEventListener('click', () => {
      const fromCrypto = modal.querySelector('.convert-from .crypto-select').value;
      const toCrypto = modal.querySelector('.convert-to .crypto-select').value;
      const amount = parseFloat(modal.querySelector('.convert-from .amount-input').value);
      
      if (amount <= 0 || isNaN(amount)) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
        return;
      }
      
      if (amount > this.userService.getCryptoBalance(fromCrypto)) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
        return;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
      const rate = this.cryptoService.getCryptoValue(fromCrypto, 1) / 
                   this.cryptoService.getCryptoValue(toCrypto, 1);
      const received = (amount * rate) * 0.99;
      
      this.userService.convertCrypto(fromCrypto, toCrypto, amount, received);
      this.updateWallet();
      modal.remove();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      this.showNotification(
        `–£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${amount.toFixed(6)} ${fromCrypto} ‚Üí ${received.toFixed(6)} ${toCrypto}`
      );
    });
  }

  showWithdrawModal(symbol = null) {
    const modal = document.createElement('div');
    modal.className = 'modal withdraw-modal';
    
    const cryptos = Object.keys(this.userService.getCryptoBalances())
      .filter(symbol => this.userService.getCryptoBalance(symbol) > 0);
    
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h3>–í—ã–≤–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</h3>
          <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
          <div class="withdraw-form">
            <div class="form-group">
              <label>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</label>
              <select class="crypto-select" ${symbol ? 'disabled' : ''}>
                ${symbol 
                  ? `<option value="${symbol}">${symbol}</option>`
                  : cryptos.map(symbol => `
                    <option value="${symbol}">${symbol} - ${this.cryptoService.getCryptoName(symbol)}</option>
                  `).join('')}
              </select>
            </div>
            
            <div class="form-group">
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
              <input type="number" class="amount-input" placeholder="0.00" step="0.000001">
              <div class="balance-hint">
                –î–æ—Å—Ç—É–ø–Ω–æ: <span class="available-balance">0.00</span>
                <button class="max-button">MAX</button>
              </div>
            </div>
            
            <div class="form-group">
              <label>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</label>
              <input type="text" class="address-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞">
            </div>
            
            <div class="form-group">
              <label>–°–µ—Ç—å:</label>
              <select class="network-select">
                <option value="mainnet">–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å (Mainnet)</option>
                <option value="testnet">–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å (Testnet)</option>
                <option value="binance">Binance Smart Chain</option>
                <option value="polygon">Polygon</option>
              </select>
            </div>
            
            <div class="withdraw-fee">
              –ö–æ–º–∏—Å—Å–∏—è –≤—ã–≤–æ–¥–∞: <span class="fee-amount">0.0005</span>
            </div>
            
            <div class="withdraw-summary">
              –í—ã –ø–æ–ª—É—á–∏—Ç–µ: <span class="received-amount">0.00</span>
            </div>
          </div>
          
          <button class="action-button confirm-withdraw-button">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const updateBalance = () => {
      const selectedCrypto = modal.querySelector('.crypto-select').value;
      const balance = this.userService.getCryptoBalance(selectedCrypto);
      modal.querySelector('.available-balance').textContent = balance.toFixed(6);
    };
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ª—É—á–µ–Ω–∏—è
    const updateReceived = () => {
      const amount = parseFloat(modal.querySelector('.amount-input').value) || 0;
      const fee = parseFloat(modal.querySelector('.fee-amount').textContent);
      const received = Math.max(0, amount - fee);
      modal.querySelector('.received-amount').textContent = received.toFixed(6);
    };
    
    modal.querySelector('.crypto-select').addEventListener('change', updateBalance);
    modal.querySelector('.amount-input').addEventListener('input', updateReceived);
    
    // –ö–Ω–æ–ø–∫–∞ MAX
    modal.querySelector('.max-button').addEventListener('click', () => {
      const selectedCrypto = modal.querySelector('.crypto-select').value;
      const balance = this.userService.getCryptoBalance(selectedCrypto);
      modal.querySelector('.amount-input').value = balance.toFixed(6);
      updateReceived();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.querySelector('.close-modal').addEventListener('click', () => {
      modal.remove();
    });
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    modal.querySelector('.confirm-withdraw-button').addEventListener('click', () => {
      const crypto = modal.querySelector('.crypto-select').value;
      const amount = parseFloat(modal.querySelector('.amount-input').value);
      const address = modal.querySelector('.address-input').value.trim();
      const network = modal.querySelector('.network-select').value;
      const fee = parseFloat(modal.querySelector('.fee-amount').textContent);
      
      if (amount <= 0 || isNaN(amount)) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞');
        return;
      }
      
      if (amount > this.userService.getCryptoBalance(crypto)) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞');
        return;
      }
      
      if (!address) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞');
        return;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–≤–æ–¥ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å)
      this.userService.withdrawCrypto(crypto, amount, address, network, fee);
      this.updateWallet();
      modal.remove();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      this.showNotification(
        `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount.toFixed(6)} ${crypto} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`
      );
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    updateBalance();
    updateReceived();
  }

  showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.classList.add('fade-out');
      setTimeout(() => notification.remove(), 500);
    }, 3000);
  }

  setupAutoUpdate() {
    return setInterval(() => {
      this.updateWallet();
    }, 60000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  updateWallet() {
    const cryptoBalances = this.userService.getCryptoBalances();
    const totalValue = this.calculateTotalValue(cryptoBalances);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    this.element.querySelector('.total-amount').textContent = `${totalValue.toFixed(2)} USD`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    this.element.querySelector('.crypto-list').innerHTML = this.renderCryptoList(cryptoBalances);
    
    // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.element.querySelectorAll('.crypto-item').forEach(item => {
      item.addEventListener('click', () => {
        const symbol = item.dataset.symbol;
        this.showCryptoDetails(symbol);
      });
    });
  }

  destroy() {
    if (this.updateInterval) {
      clearInterval(this.updateInterval);
    }
  }

  getElement() {
    return this.element;
  }
}